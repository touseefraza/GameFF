// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#fff",
        "flex": 1,
        "height": 1334,
      },
      Object {
        "backgroundColor": "#FBFAFA",
      },
    ]
  }
>
  <View
    onLayout={[Function]}
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#F8F8F8",
            "borderBottomColor": "#a7a6ab",
            "borderBottomWidth": 0.5,
            "elevation": 3,
            "flexDirection": "row",
            "height": 64,
            "justifyContent": "center",
            "left": 0,
            "paddingLeft": 6,
            "paddingRight": 10,
            "paddingTop": 18,
            "right": 0,
            "shadowColor": undefined,
            "shadowOffset": undefined,
            "shadowOpacity": undefined,
            "shadowRadius": undefined,
            "top": 0,
          },
          Object {
            "backgroundColor": "#00858d",
          },
        ]
      }
    >
      <View
        style={
          Object {
            "alignItems": "flex-start",
            "alignSelf": "center",
            "flex": 1,
          }
        }
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "alignSelf": null,
              "backgroundColor": "transparent",
              "borderBottomWidth": null,
              "borderColor": null,
              "borderLeftWidth": null,
              "borderRadius": 5,
              "borderRightWidth": null,
              "borderTopWidth": null,
              "borderWidth": undefined,
              "elevation": 0,
              "flexDirection": "row",
              "height": 45,
              "justifyContent": "space-between",
              "marginLeft": -3,
              "opacity": 1,
              "paddingBottom": 6,
              "paddingLeft": 4,
              "paddingRight": 6,
              "paddingTop": 6,
              "shadowColor": null,
              "shadowOffset": null,
              "shadowOpacity": null,
              "shadowRadius": null,
            }
          }
        >
          <Text />
        </View>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "alignSelf": "center",
            "flex": 1,
          }
        }
      >
        <Text
          numberOfLines={1}
          style={
            Object {
              "color": "#000",
              "fontFamily": "System",
              "fontSize": 17,
              "fontWeight": "700",
              "marginLeft": undefined,
              "paddingLeft": 4,
              "paddingTop": 1,
              "textAlign": "center",
            }
          }
        >
          Home
        </Text>
      </View>
      <View
        style={
          Object {
            "alignItems": "flex-end",
            "alignSelf": "center",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "flex-end",
          }
        }
      />
    </View>
  </View>
  <RCTScrollView
    automaticallyAdjustContentInsets={false}
    contentContainerStyle={
      Array [
        Object {
          "padding": undefined,
        },
        undefined,
      ]
    }
    contentInset={
      Object {
        "bottom": 0,
      }
    }
    enableAutomaticScroll={true}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={0}
    getScrollResponder={[Function]}
    handleOnScroll={[Function]}
    keyboardDismissMode="interactive"
    keyboardOpeningTime={250}
    keyboardShouldPersistTaps="handled"
    keyboardSpace={0}
    onScroll={[Function]}
    resetKeyboardSpace={[Function]}
    resetScrollToCoords={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    scrollEventThrottle={1}
    scrollForExtraHeightOnAndroid={[Function]}
    scrollToEnd={[Function]}
    scrollToFocusedInput={[Function]}
    scrollToPosition={[Function]}
    showsVerticalScrollIndicator={true}
    style={
      Object {
        "backgroundColor": "transparent",
        "flex": 1,
      }
    }
    viewIsInsideTabBar={false}
  >
    <View>
      <View
        closeOnRowBeginSwipe={false}
        closeOnRowPress={true}
        closeOnScroll={true}
        directionalDistanceChangeThreshold={2}
        disableLeftSwipe={false}
        disableRightSwipe={false}
        leftOpenValue={0}
        previewFirstRow={false}
        recalculateHiddenLayout={false}
        rightOpenValue={0}
        style={Object {}}
        swipeToOpenPercent={50}
      />
    </View>
  </RCTScrollView>
</View>
`;
